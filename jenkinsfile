#!/usr/bin/env groovy
import jenkins.model.*
import groovy.json.*
def user

node("jenkins-helm") {

    wrap([$class: 'BuildUser']) {
        user = env.BUILD_USER_ID
    }

    currentBuild.displayName = "${ENV_PROFILE}-${INSTANCE_NAME}"

    def slackNotificationChannel = "slack_channel"
    def sourceRepo = 'helm'
    def branches = ["${sourceRepo}": 'master']

    def jenkinsGitId = 'jenkins-auth'

    try {
        stage('print_input_variables') {
            // ACTION [deploy, destroy]
            get_job_config()
            deleteDir()
            println "==> ENVIRONMENT: ${ENV_PROFILE}\n" + \
                    "==> ACTION: ${ACTION}\n" + \
                    "==> USER NAME: ${user}\n" + \
                    "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        }


        stage('clone_repos') {
            dir("${WORKSPACE}") {
                branches.each {
                    println '### Cloning Git Repo ' + it.key + ' ###'
                    sh "git clone --branch " + it.value + " git@github.com:goldver/" + it.key + ".git"
                    sh "cd " + it.key + "; git status"
                }
            }
        }


        stage('run_execution_code') {
            dir("${sourceRepo}/") {
                sh "helm " + ${ACTION}  + " michael-hw simple-app/ --values simple-app/values.yaml --namespace michael"
            }
        }


    } catch (exeption) {
        currentBuild.result = "FAILED"
        slackSend (channel: slackNotificationChannel, color: '#FF0000', message: "FAILED")
        throw exeption
    } finally {
        echo "Finishing deploying helm code.."
        currentBuild.result = currentBuild.result ?: "SUCCESS"

        def formattedJobLink = '<' + env.BUILD_URL + 'console|link>'
        def message = "Job Status: ${currentBuild.result}\n" + \
                      "Environment: ${ENV_PROFILE}\n" + \
                      "Job Link: " + formattedJobLink + "\n" + \
                      "User: " + user + "\n" + \
                      "Action: " + ACTION

        println formattedJobLink
        println branchUrl

        slackSend (channel: slackNotificationChannel, color: '#00FF00', message: message)
        echo "message: $message"
   }
}
